{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","components/ErrorBoundry.js","serviceWorker.js","index.js"],"names":["Card","id","name","mail","phone","className","alt","src","CardList","robots","CardArray","map","user","i","key","email","Scroll","props","style","height","border","overflow","children","SearchBox","searchChange","type","placeholder","onChange","App","Component","onSearchChange","event","setState","searchfield","target","value","state","console","log","fetch","then","response","json","users","this","updatedRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAoBeA,G,MAjBJ,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAE1B,OACI,yBAAKC,UAAU,qDACX,yBAAMC,IAAG,oBAAeL,GAAMM,IAAG,+BAA0BL,KAG/D,6BACI,4BAAKD,GACL,4BAAKC,GACL,2BAAIC,GACJ,2BAAIC,OCCDI,EAZA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAC7B,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGZ,GAAIA,GAAIQ,EAAOI,GAAGZ,GAAIC,KAAMO,EAAOI,GAAGX,KAAMC,KAAMM,EAAOI,GAAGE,WAG5F,OACI,6BACKL,ICDEM,EAPF,SAACC,GACV,OACI,yBAAKC,MAAO,CAACC,OAAO,SAASC,OAAO,kBAAoBC,SAAS,WAC5DJ,EAAMK,W,gBCSJC,EAZC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,yBAAKnB,UAAU,OACX,2BACIA,UAAU,iCACToB,KAAK,SACLC,YAAY,mBACZC,SAAYH,MCCRI,G,MCTMC,Y,YDUvB,aAAc,IAAD,8BACT,+CAaHC,eAAe,SAACC,GAEb,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAdxC,EAAKC,MAAM,CACP3B,OAAO,GACPwB,YAAY,IAJP,E,iFAQO,IAAD,OACfI,QAAQC,IAAI,aACZC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACvB,OAAOkC,S,+BAYjH,IAAD,EACwBC,KAAKR,MAA1B3B,EADH,EACGA,OAAQwB,EADX,EACWA,YACTY,EAAcpC,EAAOqC,QAAO,SAAAC,GAC9B,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAShB,EAAYe,kBAExD,OAAIvC,EAAOyC,OAKJ,yBAAK7C,UAAU,MACf,kBAAC,IAAD,CAAWA,UAAU,cACrB,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWmB,aAAcoB,KAAKd,iBAC9B,kBAAC,EAAD,KAEG,kBAAC,EAAD,CAAUrB,OAAQoC,MAVjB,8C,GA7BahB,cEEbsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJNC,IAASC,OAEL,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDiH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.7a0be0dd.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card=({id, name , mail, phone})=>{\n    \n    return(\n        <div className=\"dib bg-light-green pa3 br3 ma2 grow bw2 shadow-5 \">\n            <img  alt={`robofriend${id}`} src={`https://robohash.org/${name}`}/>\n            \n        \n        <div>\n            <h2>{id}</h2>\n            <h2>{name}</h2>\n            <p>{mail}</p>\n            <p>{phone}</p>\n        </div>\n        </div>\n    );\n        \n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList=({robots})=>{\n    const CardArray=robots.map((user,i)=>{\n        return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} mail={robots[i].email}/>\n    })\n\n    return(\n        <div>\n            {CardArray}\n        </div>\n        \n    );\n}\nexport default CardList;","import React  from 'react'\n\nconst Scroll=(props)=>{\n    return(\n        <div style={{height:'1000px',border:'1px solid black' , overflow:'scroll'}}>\n           { props.children}\n        </div>\n    );\n}\nexport default Scroll;","import React from 'react';\n\nconst SearchBox=({searchChange})=>{\n    return(\n        <div className='pa2'>\n            <input\n                className='pa3  b--green bg-lightest-blue'\n                 type='search' \n                 placeholder='search friends..'\n                 onChange = {searchChange}\n             />\n        </div>\n    );\n}\nexport default SearchBox;"," import React ,{Component} from 'react'\n import CardList from '../components/CardList'\n import Scroll from '../components/Scroll'\n//  import {robots} from './robots'\nimport Particles from 'react-particles-js';\n\n import SearchBox from '../components/SearchBox'\n import './App.css'\n import ErrorBoundry from '../components/ErrorBoundry'\n\nexport default class App extends Component{\n    constructor(){\n        super();\n        this.state={\n            robots:[],\n            searchfield:'',\n\n        }\n    }\n    componentDidMount(){\n        console.log(\"mounted..\");\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({robots:users}));\n    }\n    \n\n     onSearchChange=(event)=>{\n         \n        this.setState({searchfield:event.target.value});\n        \n        \n        \n        \n    }\n    render(){\n        const {robots, searchfield}=this.state;\n        const updatedRobots=robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n         if(!robots.length){\n             return <h1>Loading...</h1>\n         }\n         else{\n            return(\n                <div className='tc' >\n                <Particles className='particles'/>\n                <h1 className='f1'>My Friends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                  \n                   <CardList robots={updatedRobots}/>  \n                   \n                </Scroll>\n                \n                </div>\n            );\n        }\n        \n    }\n    \n} \n","import React ,{Component}from 'react'\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError:true})\n\t}\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oops...</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\n\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\n\nReactDOM.render(\n   \n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}